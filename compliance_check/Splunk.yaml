Parameters:
  CertificateArn:
    Type: String
    Description: ACM Certificate ARN
    Default: "arn:aws:acm:us-east-1:123456789012:certificate/abcdef12-3456-7890-abcd-1234567890ab"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    Default: "vpc-12345678"
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs
    Default: ["subnet-12345678", "subnet-87654321", "subnet-abcdef12"]

Resources:
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: MyALB
    DependsOn: AlbSecurityGroup

  HttpToHttpsRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: instance
    DependsOn: Alb

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.medium
      ImageId: !SSM "/aws/service/ecs/optimized-ami/amazon-linux2023/recommended/image_id"
      SecurityGroups:
        - !Ref AlbSecurityGroup
      SubnetId: !Select [0, !Ref SubnetIds]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
      Tags:
        - Key: Pod
          Value: splunk
        - Key: Technology
          Value: search

  Ec2InstanceRole:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2Role

  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

Outputs:
  AlbDNSName:
    Value: !GetAtt Alb.DNSName
  Ec2InstanceId:
    Value: !Ref Ec2Instance
